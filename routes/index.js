var express = require('express');var router = express.Router();var users = require('./users');var games = require('./games');var metas = require('./metadata');var wordlists = require('./wordlist');var path = require('path');var bcrypt = require('bcrypt-nodejs');var words;var fontData;var metadata;function createGame( userId, level , font , color) {         var result = {};         result.owner = userId;         result.colors = color;         fontData = metadata.fonts;         result.font   = fontData.filter( thing => (thing.family == font));         result.guesses= "";         result.level  = metadata.levels[level];         result.remaining = metadata.levels[level].guesses;         result.status = "unfinished";         result.target = getGuessWord(result.level);         result.timestamp = new Date().getTime();         result.timeToComplete = "";         result.view="";         for(var i =0 ; i < result.target.length ; i++){             result.view += "_";         }        return result;}function getGuessWord(thing){        var condition = false;        while(condition == false){            var word = words[Math.floor(Math.random() * words.length)];            if(word.length <= thing.maxLength && word.length >= thing.minLength){                condition = true;            }        }        return word;}function verifySuccess(guess , word ){    for(var i =0 ; i < word.length ; i++){        var num = guess.toUpperCase().indexOf(word.toUpperCase().charAt(i));        if( num < 0){            return false;        }    }    return true;}function changeView(view , target , guess ) {    view=view.split("");    for(var i =0 ; i < guess.length ; i++){        for(var j =0 ; j < target.length ; j ++){            if(target.charAt(j) == guess.charAt(i)){                view[j]=(guess.toUpperCase().charAt(i));            }        }    }    return view.join("");}/**************************router******************/router.get('/wordgame', function(req, res, next) {    wordlists.getWordlist(function (err, data) {        if(err){res.send("err")};        words=data.wordlist;        console.log("get words list words");    });    res.sendFile( 'index.html', { root : __dirname + "/../public" } );});router.get('/wordgame/api/v3/user', function (req , res , next) {    users.initial(function (error, data) {            res.json(data);        });});router.get('/wordgame/api/v3/words', function (req, res, next) {    wordlists.initialWordlist(function (error, data) {        res.json(data);    })})router.get('/wordgame/api/v3/meta/fonts', function(req , res , next){    var result = { error : "No font information!!"};    metas.findmetadata(function (err,metadata) {        if(err){            res.json(result);        }else{            res.json(metadata.fonts);        }    });});router.get('/wordgame/api/v3/initialmeta' , function(req , res , next){    metas.initialmetadata(function (err, data) {        if(err){            var result = { msg : "No such meta data!!"};            res.json(result);        }else{            res.json(data);        }    });});router.get('/wordgame/api/v3/meta' , function(req , res , next){    metas.findmetadata(function (err, data) {        if(err){            var result = { msg : "No such meta data!!"};            res.json(result);        }else{            metadata =data[0];            res.json(data);        }    });});router.all('/wordgame/api/v3/*' , function (req, res, next) {    var autheticateUser = req.session.user;    var id = autheticateUser.id;    users.findById(id , function(error , user){       var sessioncsrf = req.session.csrf;       var csrfheader = req.headers["x-csrf"];       if( sessioncsrf && csrfheader && sessioncsrf == csrfheader&&autheticateUser && user && autheticateUser.id == user.id){           next();       }else {           res.redirect('/wordgame');       }    });});router.post('/wordgame/api/v3/:userid',function(req , res , next){    var result = createGame( req.params.userid, req.query.level , req.headers["x-font"], req.body);    games.create(result, function (err, result) {        if(err){            res.status(403).send(err);        }else {            result.target = "";            res.send(result);        }    });});router.get('/wordgame/api/v3/:userid', function(req , res , next){    var userid = req.params.userid;    games.findByUser(userid , function (err , result) {       if(err){           res.status(403).send(err);       }else{           var sum = [];           for(var key in result){               if(result[key].status == "unfinished"){                   result[key].target = "";               }               sum.push(result[key]);           }           res.send(sum);       }    });});function CompareWord(guess, game){    game.guesses = game.guesses + guess;    if(game.target.indexOf(guess) < 0){        game.remaining --;    }    game.view = changeView(game.view , game.target ,game.guesses);    if(game.remaining == 0 || verifySuccess(game.guesses , game.target )){        game.timeToComplete = new Date().getTime() - game.timestamp;        if(verifySuccess(game.guesses , game.target )){            game.status = "victory";        }else{            game.status = "loss";        }    }    return game;}router.post('/wordgame/api/v3/:userid/:gid/guesses' , function(req , res , next){    var userId = req.params.userid;    var gameId = req.params.gid;    games.findgame(userId, gameId, function(err, game){        if(err){            res.status(403).send(err);        }else{            var guess=req.query.guess;            if(game.guesses.indexOf(guess)>=0){                res.send({error:"already guess"});                return;            }            if(game.remaining < 0 || game.status == "victory" || game.status == "loss"){                res.send({ error : "this game is already done!!"});            }            game = CompareWord(guess, game);            games.updategame(userId, gameId, game,function(err, result){                if(err){                    res.status(403).send(err);                }else{                    if(result.status == "unfinished"){                         result.target= '';                    }                    res.send(result);                }            });        }    });});router.get('/wordgame/api/v3/:userid/:gid' , function(req , res , next){    var userId = req.params.userid;    if(userId == "admins"){        next();    }else{        var gameId = req.params.gid;        games.findgame(userId, gameId, function (err, game){            if(err){                res.status(403).send(err);            }else{                if( game.status == "unfinished"){                    game.target="";                }                res.send(game);            }        });    }});router.all('/wordgame/api/v3/admins/*', function(req, res, next){ //验证admin的信息    var admin = req.session.user;    users.findById(admin.id, function (err, user) {        if(user.role == "admin"){            next();        }else{            res.send({msg:"not an admin!!"});        }    });});router.get('/wordgame/api/v3/admins/users', function(req, res, next){    var admin = req.session.user;    var filter = req.query.filter || '';    var filter_status = req.query.filter_enabled || 'null';        users.findAll(admin.id, filter, filter_status, function (err, users) {            for(var i =0; i < users.length; i ++){                users[i].password = "";            }            res.send(users);        });});router.post('/wordgame/api/v3/admins/users', function(req, res, next){ //创建一个用户    var newuser = req.body;    newuser.password = bcrypt.hashSync(newuser.password);    users.save(newuser, function (err, user) {        if(err){            res.send(err);        }else{            user.password = "";            res.send(user);        }    });});router.get('/wordgame/api/v3/admins/users/:uid', function (req, res, next) { //查找一个用户    var uid = req.params.uid;    users.findById(uid, function (err, user) {        if(err){            res.send(err);        }else{            user.password = "";            res.send(user);        }    })});router.put('/wordgame/api/v3/admins/users/:uid', function (req, res, next) { // 跟新一个用户    var uid = req.params.uid;    var newuser = req.body;    users.updateUser(uid, newuser, function(err, user){        if(err){            res.send(err);        }else{            user.password = "";            res.send(user);        }    });});router.post('/wordgame/api/v3/admins/meta/fonts', function (req, res, next) {    var newfont = req.body.newfont;    metas.createfonts(newfont, function (err, m) {        if( err ){            res.send(err);        }else{            res.send(m);        }    })})router.put('/wordgame/api/v3/admins/meta/fonts', function (req, res, next) {    var family = req.body.family;    var newfont = req.body.newfont;    metas.changefonts(family, newfont, function (err, m) {        if( err ){            res.send(err);        }else{            res.send(m);        }    });});router.delete('/wordgame/api/v3/admins/meta/fonts', function (req, res, next) {    var family = req.body.family;    metas.deletefonts(family, function (err, data) {        if(err){            res.send(err);        }else{            res.send(data);        }    })});router.post('/wordgame/api/v3/admins/meta/levels', function (req, res, next) {    var newlevel = req.body.newlevel;    metas.createlevels(newlevel, function (err, data) {        if(err){            res.send(err);        }else{            res.send(data);        }    })})router.put('/wordgame/api/v3/admins/meta/levels', function (req, res, next) {    var name = req.body.name;    var newlevel = req.body.newlevel;    metas.changelevels(name, newlevel, function (err, data) {        if(err){            res.send(err);        }else{            res.send(data);        }    })});router.delete('/wordgame/api/v3/admins/meta/levels', function (req, res, next) {    var name = req.body.name;    metas.deletelevels(name, function (err, data) {        if(err){            res.send(err);        }else{            res.send(data);        }    })});router.put('/wordgame/api/v3/admins/meta/defaults', function (req, res, next) {    var newdefaults = req.body.newdefaults;    metas.changedefaults(newdefaults, function (err, data) {        if(err){            res.send(err);        }else{            res.send(data);        }    })})module.exports = router;